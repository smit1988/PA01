==20613== Memcheck, a memory error detector
==20613== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==20613== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==20613== Command: ./pa10
==20613== Parent PID: 5605
==20613== 
--20613-- 
--20613-- Valgrind options:
--20613--    --tool=memcheck
--20613--    --leak-check=full
--20613--    --verbose
--20613--    --log-file=memcheck.log
--20613-- Contents of /proc/version:
--20613--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--20613-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--20613-- Page sizes: currently 4096, max supported 4096
--20613-- Valgrind library directory: /usr/lib64/valgrind
--20613-- Reading syms from /home/shay/b/smit1988/ECE264/Solutions/PA01/PA10/pa10
--20613-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--20613--    object doesn't have a dynamic symbol table
--20613-- Reading syms from /lib64/ld-2.12.so
--20613--   Considering /usr/lib/debug/.build-id/3b/fa45bce0e82e1d90d37a0cc8630f97f2003bf5.debug ..
--20613--   .. build-id is valid
--20613-- Scheduler: using generic scheduler lock implementation.
--20613-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==20613== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-20613-by-smit1988-on-ecegrid-thin1.ecn.purdue.edu
==20613== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-20613-by-smit1988-on-ecegrid-thin1.ecn.purdue.edu
==20613== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-20613-by-smit1988-on-ecegrid-thin1.ecn.purdue.edu
==20613== 
==20613== TO CONTROL THIS PROCESS USING vgdb (which you probably
==20613== don't want to do, unless you know exactly what you're doing,
==20613== or are doing some strange experiment):
==20613==   /usr/lib64/valgrind/../../bin/vgdb --pid=20613 ...command...
==20613== 
==20613== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==20613==   /path/to/gdb ./pa10
==20613== and then give GDB the following command
==20613==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=20613
==20613== --pid is optional if only one valgrind process is running
==20613== 
--20613-- REDIR: 0x35ff417610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--20613-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--20613-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--20613-- REDIR: 0x35ff417480 (index) redirected to 0x4a07c30 (index)
--20613-- REDIR: 0x35ff417500 (strcmp) redirected to 0x4a08570 (strcmp)
--20613-- Reading syms from /lib64/libc-2.12.so
--20613--   Considering /usr/lib/debug/.build-id/73/3ad3a438b5a695f7a63a77413f9b2c8c94e8e6.debug ..
--20613--   .. build-id is valid
--20613-- REDIR: 0x35ff884cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--20613-- REDIR: 0x35ff886f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--20613-- REDIR: 0x35ff882c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--20613-- REDIR: 0x35ff87a640 (malloc) redirected to 0x4a069ac (malloc)
--20613-- REDIR: 0x35ff87b520 (free) redirected to 0x4a063a9 (free)
--20613-- REDIR: 0x35ff88aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--20613-- REDIR: 0x35ff87ba10 (realloc) redirected to 0x4a06b57 (realloc)
--20613-- REDIR: 0x35ff881160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--20613-- REDIR: 0x35ff889670 (memcpy) redirected to 0x4a08b60 (memcpy)
--20613-- REDIR: 0x35ff884500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
==20613== Invalid write of size 1
==20613==    at 0x400A23: create_business_bst (answer10.c:157)
==20613==    by 0x400CFC: main (answer10.c:344)
==20613==  Address 0x4e177b0 is 0 bytes after a block of size 2,000 alloc'd
==20613==    at 0x4A06A2E: malloc (vg_replace_malloc.c:270)
==20613==    by 0x400A06: create_business_bst (answer10.c:155)
==20613==    by 0x400CFC: main (answer10.c:344)
==20613== 
==20613== Invalid read of size 1
==20613==    at 0x400A36: create_business_bst (answer10.c:159)
==20613==    by 0x400CFC: main (answer10.c:344)
==20613==  Address 0x4e177b0 is 0 bytes after a block of size 2,000 alloc'd
==20613==    at 0x4A06A2E: malloc (vg_replace_malloc.c:270)
==20613==    by 0x400A06: create_business_bst (answer10.c:155)
==20613==    by 0x400CFC: main (answer10.c:344)
==20613== 
==20613== Invalid write of size 1
==20613==    at 0x400A4A: create_business_bst (answer10.c:160)
==20613==    by 0x400CFC: main (answer10.c:344)
==20613==  Address 0x4e17dd0 is not stack'd, malloc'd or (recently) free'd
==20613== 
==20613== Invalid read of size 1
==20613==    at 0x35FF847E2C: vfprintf (vfprintf.c:1641)
==20613==    by 0x35FF84F189: printf (printf.c:35)
==20613==    by 0x400A65: create_business_bst (answer10.c:162)
==20613==    by 0x400CFC: main (answer10.c:344)
==20613==  Address 0x4e177b0 is 0 bytes after a block of size 2,000 alloc'd
==20613==    at 0x4A06A2E: malloc (vg_replace_malloc.c:270)
==20613==    by 0x400A06: create_business_bst (answer10.c:155)
==20613==    by 0x400CFC: main (answer10.c:344)
==20613== 
==20613== Syscall param write(buf) points to unaddressable byte(s)
==20613==    at 0x35FF8DB600: __write_nocancel (syscall-template.S:82)
==20613==    by 0x35FF871AD2: _IO_file_write@@GLIBC_2.2.5 (fileops.c:1268)
==20613==    by 0x35FF871999: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:522)
==20613==    by 0x35FF84818F: vfprintf (vfprintf.c:1641)
==20613==    by 0x35FF84F189: printf (printf.c:35)
==20613==    by 0x400A65: create_business_bst (answer10.c:162)
==20613==    by 0x400CFC: main (answer10.c:344)
==20613==  Address 0x4e177b0 is 0 bytes after a block of size 2,000 alloc'd
==20613==    at 0x4A06A2E: malloc (vg_replace_malloc.c:270)
==20613==    by 0x400A06: create_business_bst (answer10.c:155)
==20613==    by 0x400CFC: main (answer10.c:344)
==20613== 
==20613== Invalid read of size 1
==20613==    at 0x35FF87462E: _IO_default_xsputn (genops.c:485)
==20613==    by 0x35FF871791: _IO_file_xsputn@@GLIBC_2.2.5 (fileops.c:1372)
==20613==    by 0x35FF84818F: vfprintf (vfprintf.c:1641)
==20613==    by 0x35FF84F189: printf (printf.c:35)
==20613==    by 0x400A65: create_business_bst (answer10.c:162)
==20613==    by 0x400CFC: main (answer10.c:344)
==20613==  Address 0x4e17be0 is not stack'd, malloc'd or (recently) free'd
==20613== 
--20613-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting
--20613-- si_code=80;  Faulting address: 0x0;  sp: 0x4030b6dd0

valgrind: the 'impossible' happened:
   Killed by fatal signal
==20613==    at 0x3803EC04: vgPlain_arena_malloc (m_mallocfree.c:291)
==20613==    by 0x38003C34: vgMemCheck_new_block (mc_malloc_wrappers.c:263)
==20613==    by 0x3800409A: vgMemCheck_malloc (mc_malloc_wrappers.c:301)
==20613==    by 0x3807A58A: vgPlain_scheduler (scheduler.c:1665)
==20613==    by 0x380A5A29: run_a_thread_NORETURN (syswrap-linux.c:103)

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable
==20613==    at 0x4A06A2E: malloc (vg_replace_malloc.c:270)
==20613==    by 0x40092D: create_business_bst (answer10.c:134)
==20613==    by 0x400CFC: main (answer10.c:344)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

